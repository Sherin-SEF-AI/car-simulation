[tool:pytest]
# Pytest configuration for Robotic Car Simulation

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output options
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --cov=src
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing
    --cov-fail-under=80
    --junit-xml=test-results.xml
    --json-report
    --json-report-file=test-results.json

# Markers for test categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interaction
    performance: Performance and regression tests
    slow: Tests that take a long time to run
    gpu: Tests that require GPU/OpenGL support
    network: Tests that require network access
    ui: Tests that require GUI interaction

# Test timeouts
timeout = 300
timeout_method = thread

# Warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:PyQt6.*

# Minimum version requirements
minversion = 7.0

# Parallel execution
# Uncomment to enable parallel test execution
# addopts = -n auto

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml